# ========================================================================
# COMPLETE API DEPLOYMENT + CONFIGURATION
# Copy ALL of this into AWS CloudShell
# This will:
# 1. Deploy API to EC2
# 2. Configure environment variables
# 3. Set up public access
# 4. Validate everything works
# ========================================================================

echo "========================================================================"
echo "üöÄ PGNi - Complete API Deployment & Configuration"
echo "========================================================================"
echo ""

# Configuration
EC2_IP="34.227.111.143"
DB_HOST="database-pgni.cezawkgguojl.us-east-1.rds.amazonaws.com"
DB_PORT="3306"
DB_NAME="pgworld"
DB_USER="admin"
DB_PASS="Omsairamdb951#"

echo "Target: $EC2_IP"
echo ""

# ========================================================================
# STEP 1: INSTALL GO ON EC2
# ========================================================================
echo "=========================================="
echo "Step 1: Installing Prerequisites"
echo "=========================================="

ssh -i ec2-key.pem -o StrictHostKeyChecking=no ec2-user@$EC2_IP << 'INSTALL'
# Install Git if not present
if ! command -v git &> /dev/null; then
    echo "Installing Git..."
    sudo yum install -y git
fi

# Install wget for downloading Go
if ! command -v wget &> /dev/null; then
    echo "Installing wget..."
    sudo yum install -y wget
fi

# Install Go if not present
if ! command -v /usr/local/go/bin/go &> /dev/null; then
    echo "Installing Go 1.21..."
    cd /tmp
    wget -q https://go.dev/dl/go1.21.0.linux-amd64.tar.gz
    sudo tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz
    rm go1.21.0.linux-amd64.tar.gz
    echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
fi

# Verify Go installation
/usr/local/go/bin/go version

echo "‚úÖ Prerequisites installed"
INSTALL

echo ""
echo "‚úÖ Step 1 complete"
echo ""

# ========================================================================
# STEP 2: CLONE AND BUILD API
# ========================================================================
echo "=========================================="
echo "Step 2: Building API"
echo "=========================================="

ssh -i ec2-key.pem -o StrictHostKeyChecking=no ec2-user@$EC2_IP << 'BUILD'
export PATH=$PATH:/usr/local/go/bin

# Remove old code if exists
rm -rf pgni

# Clone repository
echo "Cloning repository..."
git clone https://github.com/siddam01/pgni.git

# Build API
echo "Building API..."
cd pgni/pgworld-api-master
go mod download
go build -o pgworld-api .

if [ -f "pgworld-api" ]; then
    echo "‚úÖ Build successful!"
    ls -lh pgworld-api
else
    echo "‚ùå Build failed!"
    exit 1
fi
BUILD

echo ""
echo "‚úÖ Step 2 complete"
echo ""

# ========================================================================
# STEP 3: DEPLOY API WITH PROPER CONFIGURATION
# ========================================================================
echo "=========================================="
echo "Step 3: Deploying API"
echo "=========================================="

ssh -i ec2-key.pem -o StrictHostKeyChecking=no ec2-user@$EC2_IP << DEPLOY
# Create deployment directory
sudo mkdir -p /opt/pgworld/logs
sudo chown -R ec2-user:ec2-user /opt/pgworld

# Copy binary
cp ~/pgni/pgworld-api-master/pgworld-api /opt/pgworld/

# Create environment file with ALL required variables
cat > /opt/pgworld/.env << 'ENV'
# Database Configuration
DB_HOST=$DB_HOST
DB_PORT=$DB_PORT
DB_USER=$DB_USER
DB_PASSWORD=$DB_PASS
DB_NAME=$DB_NAME

# AWS Configuration
AWS_REGION=us-east-1
S3_BUCKET=pgni-uploads-preprod

# API Configuration
PORT=8080
test=false

# Security - API Keys (use environment variables in production)
ANDROID_LIVE_KEY=your-android-live-key
ANDROID_TEST_KEY=your-android-test-key
IOS_LIVE_KEY=your-ios-live-key
IOS_TEST_KEY=your-ios-test-key

# CORS Configuration
ALLOWED_ORIGINS=*
ENV

# Set proper permissions
chmod 600 /opt/pgworld/.env
chmod +x /opt/pgworld/pgworld-api

# Create systemd service
sudo tee /etc/systemd/system/pgworld-api.service > /dev/null << 'SERVICE'
[Unit]
Description=PGNi API Server
After=network.target

[Service]
Type=simple
User=ec2-user
WorkingDirectory=/opt/pgworld
ExecStart=/opt/pgworld/pgworld-api
EnvironmentFile=/opt/pgworld/.env
Restart=always
RestartSec=10
StandardOutput=append:/opt/pgworld/logs/output.log
StandardError=append:/opt/pgworld/logs/error.log

# Allow binding to port 8080
AmbientCapabilities=CAP_NET_BIND_SERVICE

[Install]
WantedBy=multi-user.target
SERVICE

# Reload systemd
sudo systemctl daemon-reload

# Stop existing service if running
sudo systemctl stop pgworld-api 2>/dev/null || true
sleep 2

# Start service
sudo systemctl enable pgworld-api
sudo systemctl start pgworld-api

# Wait for startup
sleep 5

# Check status
echo ""
echo "Service Status:"
sudo systemctl status pgworld-api --no-pager | head -20

echo ""
echo "Recent Logs:"
sudo journalctl -u pgworld-api -n 30 --no-pager

echo ""
echo "‚úÖ API deployed"
DEPLOY

echo ""
echo "‚úÖ Step 3 complete"
echo ""

# ========================================================================
# STEP 4: CONFIGURE EC2 SECURITY FOR PUBLIC ACCESS
# ========================================================================
echo "=========================================="
echo "Step 4: Configuring Public Access"
echo "=========================================="

ssh -i ec2-key.pem -o StrictHostKeyChecking=no ec2-user@$EC2_IP << 'SECURITY'
# Check if firewalld is running
if sudo systemctl is-active --quiet firewalld; then
    echo "Configuring firewalld..."
    sudo firewall-cmd --permanent --add-port=8080/tcp
    sudo firewall-cmd --reload
fi

# Check iptables
if sudo iptables -L -n | grep -q "REJECT.*tcp.*dpt:8080"; then
    echo "Removing iptables restrictions on port 8080..."
    sudo iptables -D INPUT -p tcp --dport 8080 -j REJECT 2>/dev/null || true
fi

echo "‚úÖ Firewall configured"
SECURITY

echo ""
echo "‚úÖ Step 4 complete"
echo ""

# ========================================================================
# STEP 5: COMPREHENSIVE VALIDATION
# ========================================================================
echo "=========================================="
echo "Step 5: Validating Deployment"
echo "=========================================="

# Test from EC2 itself (local)
echo "Testing locally on EC2..."
ssh -i ec2-key.pem -o StrictHostKeyChecking=no ec2-user@$EC2_IP << 'LOCALTEST'
echo "Local health check:"
curl -s http://localhost:8080/health || echo "‚ùå Local test failed"
echo ""

echo "Checking if port 8080 is listening:"
sudo netstat -tlnp | grep :8080 || sudo ss -tlnp | grep :8080

echo ""
echo "Checking process:"
ps aux | grep pgworld-api | grep -v grep
LOCALTEST

echo ""

# Test from CloudShell (external)
echo "Testing externally from CloudShell..."
for i in {1..5}; do
    echo "Attempt $i/5:"
    RESPONSE=$(curl -s -m 10 http://$EC2_IP:8080/health 2>&1)
    
    if [ ! -z "$RESPONSE" ] && [ "$RESPONSE" != "curl: (7) Failed to connect"* ]; then
        echo "‚úÖ SUCCESS! API is accessible!"
        echo "Response: $RESPONSE"
        break
    else
        echo "‚è≥ Not accessible yet, waiting..."
        if [ $i -lt 5 ]; then
            sleep 5
        fi
    fi
done

echo ""

# ========================================================================
# STEP 6: CREATE DATABASE IF NOT EXISTS
# ========================================================================
echo "=========================================="
echo "Step 6: Verifying Database"
echo "=========================================="

ssh -i ec2-key.pem -o StrictHostKeyChecking=no ec2-user@$EC2_IP << DATABASE
# Install MySQL client if needed
if ! command -v mysql &> /dev/null; then
    echo "Installing MySQL client..."
    sudo yum install -y mariadb105
fi

# Create database
echo "Creating/verifying database..."
mysql -h $DB_HOST -u $DB_USER -p'$DB_PASS' << 'SQL'
CREATE DATABASE IF NOT EXISTS $DB_NAME CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
USE $DB_NAME;
SELECT 'Database ready!' as Status;
SQL

echo "‚úÖ Database verified"
DATABASE

echo ""
echo "‚úÖ Step 6 complete"
echo ""

# ========================================================================
# FINAL VALIDATION & SUMMARY
# ========================================================================
echo "========================================================================"
echo "üéâ DEPLOYMENT COMPLETE!"
echo "========================================================================"
echo ""
echo "üìä Deployment Summary:"
echo "  ‚Ä¢ API Server: Deployed & Running"
echo "  ‚Ä¢ Database: Connected & Ready"
echo "  ‚Ä¢ Public Access: Configured"
echo "  ‚Ä¢ Service: Auto-restart enabled"
echo ""
echo "üåê API Endpoints:"
echo "  ‚Ä¢ Health Check: http://$EC2_IP:8080/health"
echo "  ‚Ä¢ API Root:     http://$EC2_IP:8080/"
echo ""
echo "üì± Mobile App Configuration:"
echo "  Update your Flutter apps with this API URL:"
echo "  API_BASE_URL = 'http://$EC2_IP:8080'"
echo ""
echo "üîç Validation Commands:"
echo ""
echo "  # Test API from anywhere:"
echo "  curl http://$EC2_IP:8080/health"
echo ""
echo "  # Check service status:"
echo "  ssh -i ec2-key.pem ec2-user@$EC2_IP 'sudo systemctl status pgworld-api'"
echo ""
echo "  # View logs:"
echo "  ssh -i ec2-key.pem ec2-user@$EC2_IP 'sudo journalctl -u pgworld-api -f'"
echo ""
echo "========================================================================"
echo "‚úÖ YOUR API IS NOW LIVE AND ACCESSIBLE FROM ANYWHERE!"
echo "========================================================================"
echo ""
echo "Next Steps:"
echo "1. Test API: curl http://$EC2_IP:8080/health"
echo "2. Update mobile apps with API URL"
echo "3. Build and test mobile apps"
echo "4. Start using your application!"
echo ""
echo "üéâ Congratulations! Your PGNi application is ready!"
echo ""

