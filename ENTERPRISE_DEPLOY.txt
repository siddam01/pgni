#!/bin/bash
# Enterprise-Grade Deployment Pipeline
# Stages: Validation â†’ Build â†’ Test â†’ Deploy â†’ Verify
# Each stage with clear status and rollback capability

set -e  # Exit on any error

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
EC2_IP="34.227.111.143"
SSH_KEY="cloudshell-key.pem"
BACKUP_DIR="/opt/pgworld/backups"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
DEPLOYMENT_ID="deploy_${TIMESTAMP}"

# Progress tracking
TOTAL_STAGES=6
CURRENT_STAGE=0

# Function to print stage header
print_stage() {
    CURRENT_STAGE=$((CURRENT_STAGE + 1))
    echo ""
    echo "=========================================="
    echo -e "${BLUE}STAGE $CURRENT_STAGE/$TOTAL_STAGES: $1${NC}"
    echo "=========================================="
    echo ""
}

# Function to print success
print_success() {
    echo -e "${GREEN}âœ“ $1${NC}"
}

# Function to print error
print_error() {
    echo -e "${RED}âœ— $1${NC}"
}

# Function to print warning
print_warning() {
    echo -e "${YELLOW}âš  $1${NC}"
}

# Function to rollback on failure
rollback() {
    print_error "DEPLOYMENT FAILED!"
    echo ""
    echo "Rolling back to previous version..."
    
    ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP << 'ROLLBACK' 2>&1 | grep -v "Pseudo"
    if [ -f /opt/pgworld/backups/pgworld-api.backup ]; then
        sudo systemctl stop pgworld-api
        cp /opt/pgworld/backups/pgworld-api.backup /opt/pgworld/pgworld-api
        sudo systemctl start pgworld-api
        echo "âœ“ Rollback complete"
    else
        echo "âš  No backup found, manual intervention required"
    fi
ROLLBACK
    
    exit 1
}

# Set trap for errors
trap rollback ERR

# Start deployment
echo "=========================================="
echo "ðŸš€ Enterprise Deployment Pipeline"
echo "=========================================="
echo "Deployment ID: $DEPLOYMENT_ID"
echo "Target: $EC2_IP"
echo "Time: $(date)"
echo ""

# ============================================================
# STAGE 1: PRE-DEPLOYMENT VALIDATION
# ============================================================
print_stage "Pre-Deployment Validation"

echo "1.1 Validating SSH connectivity..."
if ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no -o ConnectTimeout=5 ec2-user@$EC2_IP "echo 'OK'" 2>&1 | grep -q "OK"; then
    print_success "SSH connection validated"
else
    print_error "Cannot connect to EC2"
    exit 1
fi

echo "1.2 Checking EC2 resources..."
RESOURCES=$(ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP << 'CHECK' 2>&1 | grep -v "Pseudo"
    echo "Disk: $(df -h / | tail -1 | awk '{print $5}')"
    echo "Memory: $(free -h | grep Mem | awk '{print $3"/"$2}')"
    echo "CPU: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)%"
CHECK
)
echo "$RESOURCES"
print_success "EC2 resources available"

echo "1.3 Validating database connectivity..."
DB_CHECK=$(ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP "mysql -h database-pgni.cezawkgguojl.us-east-1.rds.amazonaws.com -P 3306 -u admin -pOmsairamdb951# -e 'SELECT 1' 2>&1 | grep -v 'Warning'" 2>&1 | grep -v "Pseudo")
if [[ $DB_CHECK == *"1"* ]]; then
    print_success "Database connection validated"
else
    print_error "Cannot connect to database"
    exit 1
fi

echo "1.4 Checking current API status..."
CURRENT_STATUS=$(ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP "sudo systemctl is-active pgworld-api 2>/dev/null || echo 'not-found'" 2>&1 | grep -v "Pseudo")
echo "Current API status: $CURRENT_STATUS"

print_success "Pre-deployment validation complete"

# ============================================================
# STAGE 2: BACKUP CURRENT VERSION
# ============================================================
print_stage "Backup Current Version"

if [ "$CURRENT_STATUS" == "active" ]; then
    echo "2.1 Creating backup..."
    ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP << BACKUP 2>&1 | grep -v "Pseudo"
    mkdir -p /opt/pgworld/backups
    if [ -f /opt/pgworld/pgworld-api ]; then
        cp /opt/pgworld/pgworld-api /opt/pgworld/backups/pgworld-api.backup
        cp /opt/pgworld/.env /opt/pgworld/backups/.env.backup 2>/dev/null || true
        echo "Backup created: pgworld-api.backup"
    fi
BACKUP
    print_success "Backup created"
else
    print_warning "No existing API to backup (fresh deployment)"
fi

# ============================================================
# STAGE 3: BUILD APPLICATION
# ============================================================
print_stage "Build Application"

echo "3.1 Cloning source code..."
cd /tmp
rm -rf pgni_build_$TIMESTAMP
git clone -q --depth 1 https://github.com/siddam01/pgni.git pgni_build_$TIMESTAMP 2>&1 | tail -1
cd pgni_build_$TIMESTAMP/pgworld-api-master
print_success "Code cloned"

echo "3.2 Installing build dependencies..."
if [ ! -f /usr/local/go/bin/go ]; then
    echo "Installing Go..."
    cd /tmp
    wget -q https://go.dev/dl/go1.21.0.linux-amd64.tar.gz
    sudo tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz
    rm go1.21.0.linux-amd64.tar.gz
    print_success "Go installed"
else
    print_success "Go already installed"
fi

export PATH=$PATH:/usr/local/go/bin
export GOCACHE=/tmp/go-cache-$TIMESTAMP

echo "3.3 Downloading Go modules..."
cd /tmp/pgni_build_$TIMESTAMP/pgworld-api-master
go mod download 2>&1 | tail -3
print_success "Dependencies downloaded"

echo "3.4 Compiling application..."
echo "Note: This takes 2-3 minutes (longest step)"
GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o pgworld-api . 2>&1 | tail -5

if [ ! -f pgworld-api ]; then
    print_error "Build failed"
    exit 1
fi

BINARY_SIZE=$(du -h pgworld-api | cut -f1)
print_success "Build complete (size: $BINARY_SIZE)"

# ============================================================
# STAGE 4: DEPLOY TO EC2
# ============================================================
print_stage "Deploy to EC2"

echo "4.1 Stopping current service..."
ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP "sudo systemctl stop pgworld-api 2>/dev/null || true" 2>&1 | grep -v "Pseudo"
print_success "Service stopped"

echo "4.2 Creating directory structure..."
ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP << DIRS 2>&1 | grep -v "Pseudo"
sudo mkdir -p /opt/pgworld/logs
sudo mkdir -p /opt/pgworld/backups
sudo chown -R ec2-user:ec2-user /opt/pgworld
DIRS
print_success "Directories created"

echo "4.3 Copying binary..."
scp -i ~/$SSH_KEY -o StrictHostKeyChecking=no pgworld-api ec2-user@$EC2_IP:/opt/pgworld/ 2>&1 | grep -v "Pseudo-terminal"
ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP "chmod +x /opt/pgworld/pgworld-api" 2>&1 | grep -v "Pseudo"
print_success "Binary deployed"

echo "4.4 Configuring environment..."
ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP << 'ENV' 2>&1 | grep -v "Pseudo"
cat > /opt/pgworld/.env << 'EOF'
DB_HOST=database-pgni.cezawkgguojl.us-east-1.rds.amazonaws.com
DB_PORT=3306
DB_USER=admin
DB_PASSWORD=Omsairamdb951#
DB_NAME=pgworld
AWS_REGION=us-east-1
S3_BUCKET=pgni-preprod-698302425856-uploads
PORT=8080
test=false
EOF
chmod 600 /opt/pgworld/.env
ENV
print_success "Configuration deployed"

echo "4.5 Installing systemd service..."
ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP << 'SERVICE' 2>&1 | grep -v "Pseudo"
sudo tee /etc/systemd/system/pgworld-api.service > /dev/null << 'SVC'
[Unit]
Description=PGNi API Server
After=network.target

[Service]
Type=simple
User=ec2-user
WorkingDirectory=/opt/pgworld
ExecStart=/opt/pgworld/pgworld-api
EnvironmentFile=/opt/pgworld/.env
Restart=always
RestartSec=10
StandardOutput=append:/opt/pgworld/logs/output.log
StandardError=append:/opt/pgworld/logs/error.log

[Install]
WantedBy=multi-user.target
SVC

sudo systemctl daemon-reload
sudo systemctl enable pgworld-api
SERVICE
print_success "Service installed"

# ============================================================
# STAGE 5: DATABASE INITIALIZATION
# ============================================================
print_stage "Database Initialization"

echo "5.1 Creating database..."
ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP << 'DB' 2>&1 | grep -v "Pseudo" | grep -v "Warning"
mysql -h database-pgni.cezawkgguojl.us-east-1.rds.amazonaws.com -P 3306 -u admin -pOmsairamdb951# \
  -e "CREATE DATABASE IF NOT EXISTS pgworld CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;" 2>&1 | grep -v "Warning"
DB
print_success "Database created"

echo "5.2 Creating schema..."
ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP << 'SCHEMA' 2>&1 | grep -v "Pseudo" | grep -v "Warning"
mysql -h database-pgni.cezawkgguojl.us-east-1.rds.amazonaws.com -P 3306 -u admin -pOmsairamdb951# pgworld << 'SQL' 2>&1 | grep -v "Warning"
CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(100) NOT NULL UNIQUE,
    email VARCHAR(255) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    role ENUM('admin', 'pg_owner', 'tenant') NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE IF NOT EXISTS pg_properties (
    id INT AUTO_INCREMENT PRIMARY KEY,
    owner_id INT NOT NULL,
    name VARCHAR(255) NOT NULL,
    address TEXT,
    city VARCHAR(100),
    total_rooms INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (owner_id) REFERENCES users(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE IF NOT EXISTS rooms (
    id INT AUTO_INCREMENT PRIMARY KEY,
    property_id INT NOT NULL,
    room_number VARCHAR(50),
    rent_amount DECIMAL(10,2),
    is_occupied BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (property_id) REFERENCES pg_properties(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE IF NOT EXISTS tenants (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    room_id INT,
    name VARCHAR(255) NOT NULL,
    phone VARCHAR(20),
    move_in_date DATE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE IF NOT EXISTS payments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    tenant_id INT NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    payment_date DATE NOT NULL,
    status ENUM('pending', 'completed', 'failed') DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
SQL
SCHEMA
print_success "Schema created"

# ============================================================
# STAGE 6: START & VERIFY
# ============================================================
print_stage "Start & Verify"

echo "6.1 Starting API service..."
ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP "sudo systemctl start pgworld-api" 2>&1 | grep -v "Pseudo"
sleep 3
print_success "Service started"

echo "6.2 Checking service status..."
SERVICE_STATUS=$(ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP "sudo systemctl is-active pgworld-api" 2>&1 | grep -v "Pseudo")
if [ "$SERVICE_STATUS" == "active" ]; then
    print_success "Service is active"
else
    print_error "Service failed to start: $SERVICE_STATUS"
    echo "Checking logs..."
    ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP "sudo journalctl -u pgworld-api -n 20 --no-pager" 2>&1 | grep -v "Pseudo"
    exit 1
fi

echo "6.3 Testing internal endpoint..."
sleep 2
INTERNAL_TEST=$(ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP "curl -s http://localhost:8080/health" 2>&1 | grep -v "Pseudo")
if [[ $INTERNAL_TEST == *"healthy"* ]]; then
    print_success "Internal health check passed"
    echo "Response: $INTERNAL_TEST"
else
    print_error "Internal health check failed: $INTERNAL_TEST"
    exit 1
fi

echo "6.4 Testing external endpoint..."
EXTERNAL_TEST=$(curl -s http://$EC2_IP:8080/health)
if [[ $EXTERNAL_TEST == *"healthy"* ]]; then
    print_success "External health check passed"
    echo "Response: $EXTERNAL_TEST"
else
    print_warning "External health check failed: $EXTERNAL_TEST"
    echo "Note: API is running internally but may have firewall issues"
fi

echo "6.5 Verifying service logs..."
LOG_CHECK=$(ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP "sudo journalctl -u pgworld-api -n 10 --no-pager 2>&1 | grep -i 'error\|fatal\|panic' || echo 'No errors'" 2>&1 | grep -v "Pseudo")
if [[ $LOG_CHECK == *"No errors"* ]]; then
    print_success "No errors in logs"
else
    print_warning "Check logs for warnings:"
    echo "$LOG_CHECK"
fi

# ============================================================
# DEPLOYMENT COMPLETE
# ============================================================
echo ""
echo "=========================================="
echo -e "${GREEN}âœ“ DEPLOYMENT SUCCESSFUL!${NC}"
echo "=========================================="
echo ""
echo "Deployment Summary:"
echo "  ID: $DEPLOYMENT_ID"
echo "  Time: $(date)"
echo "  Binary Size: $BINARY_SIZE"
echo "  Status: $SERVICE_STATUS"
echo ""
echo "Access Points:"
echo "  Health Check: http://$EC2_IP:8080/health"
echo "  API Base URL: http://$EC2_IP:8080"
echo ""
echo "Service Management:"
echo "  Status: ssh -i $SSH_KEY ec2-user@$EC2_IP 'sudo systemctl status pgworld-api'"
echo "  Logs:   ssh -i $SSH_KEY ec2-user@$EC2_IP 'sudo journalctl -u pgworld-api -f'"
echo "  Restart: ssh -i $SSH_KEY ec2-user@$EC2_IP 'sudo systemctl restart pgworld-api'"
echo ""
echo "Cleanup:"
rm -rf /tmp/pgni_build_$TIMESTAMP
rm -rf /tmp/go-cache-$TIMESTAMP
print_success "Build artifacts cleaned"
echo ""

