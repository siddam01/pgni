#!/bin/bash
# Quick Status Check - Copy and paste this into CloudShell

echo "=========================================="
echo "üîç PGNi API - Current Status Check"
echo "=========================================="
echo ""

# Check if SSH key exists
echo "1. Checking SSH key in CloudShell..."
if [ -f cloudshell-key.pem ]; then
    echo "   ‚úÖ SSH key file exists"
    KEY_SIZE=$(wc -c < cloudshell-key.pem)
    echo "   üìä Key file size: $KEY_SIZE bytes"
    
    if [ $KEY_SIZE -lt 100 ]; then
        echo "   ‚ö†Ô∏è Key file seems too small - might be empty or incomplete"
    else
        echo "   ‚úÖ Key file size looks good"
    fi
    
    FIRST_LINE=$(head -1 cloudshell-key.pem)
    if [[ $FIRST_LINE == *"BEGIN RSA PRIVATE KEY"* ]] || [[ $FIRST_LINE == *"BEGIN PRIVATE KEY"* ]]; then
        echo "   ‚úÖ Key format looks correct"
    else
        echo "   ‚ùå Key format incorrect - should start with BEGIN RSA PRIVATE KEY"
        echo "   First line: $FIRST_LINE"
    fi
else
    echo "   ‚ùå SSH key file NOT FOUND"
    echo "   ‚ö†Ô∏è YOU NEED TO CREATE IT FIRST!"
    echo ""
    echo "   Run this command:"
    echo "   nano cloudshell-key.pem"
    echo ""
    echo "   Then paste your SSH key from:"
    echo "   C:\\MyFolder\\Mytest\\pgworld-master\\cloudshell-key.pem"
    exit 1
fi

echo ""

# Check EC2 instance
echo "2. Checking EC2 instance..."
EC2_IP="34.227.111.143"
EC2_STATUS=$(aws ec2 describe-instances --filters "Name=ip-address,Values=$EC2_IP" --query 'Reservations[0].Instances[0].State.Name' --output text 2>/dev/null)

if [ "$EC2_STATUS" == "running" ]; then
    echo "   ‚úÖ EC2 instance is RUNNING"
else
    echo "   ‚ö†Ô∏è EC2 status: $EC2_STATUS"
fi

echo ""

# Check security group
echo "3. Checking security group (port 8080)..."
SG_CHECK=$(aws ec2 describe-security-groups --filters "Name=ip-permission.to-port,Values=8080" --query 'SecurityGroups[0].IpPermissions[?ToPort==`8080`].IpRanges[?CidrIp==`0.0.0.0/0`]' --output text 2>/dev/null)

if [ ! -z "$SG_CHECK" ]; then
    echo "   ‚úÖ Port 8080 is open to the internet"
else
    echo "   ‚ö†Ô∏è Port 8080 might not be open"
fi

echo ""

# Try to connect to EC2
echo "4. Testing SSH connection to EC2..."
chmod 600 cloudshell-key.pem 2>/dev/null
SSH_TEST=$(ssh -i cloudshell-key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=5 ec2-user@$EC2_IP "echo 'SSH_OK'" 2>&1)

if [[ $SSH_TEST == *"SSH_OK"* ]]; then
    echo "   ‚úÖ SSH connection works!"
else
    echo "   ‚ùå SSH connection failed"
    echo "   Error: $SSH_TEST"
    exit 1
fi

echo ""

# Check if API is deployed
echo "5. Checking if API is deployed on EC2..."
API_CHECK=$(ssh -i cloudshell-key.pem -o StrictHostKeyChecking=no ec2-user@$EC2_IP "ls -la /opt/pgworld/pgworld-api 2>/dev/null" 2>&1)

if [[ $API_CHECK == *"pgworld-api"* ]]; then
    echo "   ‚úÖ API binary exists on EC2"
else
    echo "   ‚ùå API binary NOT FOUND on EC2"
    echo "   ‚ö†Ô∏è API HAS NOT BEEN DEPLOYED YET!"
    echo ""
    echo "   üëâ YOU NEED TO RUN THE DEPLOYMENT SCRIPT"
    echo ""
    echo "   Open this file on your PC:"
    echo "   C:\\MyFolder\\Mytest\\pgworld-master\\DEPLOY_WITH_PROGRESS.txt"
    echo ""
    echo "   Copy all contents and paste into CloudShell"
    exit 1
fi

echo ""

# Check if service is running
echo "6. Checking if API service is running..."
SERVICE_STATUS=$(ssh -i cloudshell-key.pem -o StrictHostKeyChecking=no ec2-user@$EC2_IP "sudo systemctl is-active pgworld-api" 2>&1)

if [[ $SERVICE_STATUS == "active" ]]; then
    echo "   ‚úÖ API service is RUNNING"
else
    echo "   ‚ùå API service is NOT running"
    echo "   Status: $SERVICE_STATUS"
    echo ""
    echo "   Trying to start it..."
    ssh -i cloudshell-key.pem -o StrictHostKeyChecking=no ec2-user@$EC2_IP "sudo systemctl start pgworld-api"
    sleep 3
    
    NEW_STATUS=$(ssh -i cloudshell-key.pem -o StrictHostKeyChecking=no ec2-user@$EC2_IP "sudo systemctl is-active pgworld-api" 2>&1)
    if [[ $NEW_STATUS == "active" ]]; then
        echo "   ‚úÖ Service started successfully!"
    else
        echo "   ‚ùå Service failed to start"
        echo ""
        echo "   Checking logs..."
        ssh -i cloudshell-key.pem -o StrictHostKeyChecking=no ec2-user@$EC2_IP "sudo journalctl -u pgworld-api -n 20 --no-pager"
        exit 1
    fi
fi

echo ""

# Check if API responds locally on EC2
echo "7. Testing API from inside EC2 (localhost)..."
LOCAL_TEST=$(ssh -i cloudshell-key.pem -o StrictHostKeyChecking=no ec2-user@$EC2_IP "curl -s http://localhost:8080/health" 2>&1)

if [[ $LOCAL_TEST == *"healthy"* ]] || [[ $LOCAL_TEST == *"status"* ]]; then
    echo "   ‚úÖ API responds on localhost"
    echo "   Response: $LOCAL_TEST"
else
    echo "   ‚ùå API not responding on localhost"
    echo "   Response: $LOCAL_TEST"
fi

echo ""

# Check if API responds from internet
echo "8. Testing API from internet (public IP)..."
PUBLIC_TEST=$(curl -s --connect-timeout 5 http://$EC2_IP:8080/health 2>&1)

if [[ $PUBLIC_TEST == *"healthy"* ]] || [[ $PUBLIC_TEST == *"status"* ]]; then
    echo "   ‚úÖ API responds from internet!"
    echo "   Response: $PUBLIC_TEST"
else
    echo "   ‚ùå API not responding from internet"
    echo "   Response: $PUBLIC_TEST"
    
    # Check if port is listening
    echo ""
    echo "   Checking if port 8080 is listening..."
    PORT_CHECK=$(ssh -i cloudshell-key.pem -o StrictHostKeyChecking=no ec2-user@$EC2_IP "sudo netstat -tlnp | grep 8080 || sudo ss -tlnp | grep 8080" 2>&1)
    
    if [[ $PORT_CHECK == *"8080"* ]]; then
        echo "   ‚úÖ Port 8080 is listening"
        echo "   Details: $PORT_CHECK"
    else
        echo "   ‚ùå Port 8080 is NOT listening"
        echo "   ‚ö†Ô∏è API might have crashed or failed to start"
    fi
fi

echo ""
echo "=========================================="
echo "üìä SUMMARY"
echo "=========================================="
echo ""

# Determine overall status
if [[ $SERVICE_STATUS == "active" ]] && [[ $PUBLIC_TEST == *"healthy"* ]]; then
    echo "‚úÖ ‚úÖ ‚úÖ API IS LIVE AND ACCESSIBLE! ‚úÖ ‚úÖ ‚úÖ"
    echo ""
    echo "üéâ Your API is working!"
    echo ""
    echo "üåê Access it at:"
    echo "   http://$EC2_IP:8080/health"
    echo ""
    echo "üì± Configure your mobile apps with:"
    echo "   baseUrl: 'http://$EC2_IP:8080'"
    echo ""
elif [[ $SERVICE_STATUS == "active" ]] && [[ $LOCAL_TEST == *"healthy"* ]]; then
    echo "‚ö†Ô∏è API is running but NOT accessible from internet"
    echo ""
    echo "Possible issues:"
    echo "1. Security group might not allow port 8080"
    echo "2. API might be binding to localhost only (not 0.0.0.0)"
    echo ""
    echo "Let me check the API configuration..."
    ssh -i cloudshell-key.pem -o StrictHostKeyChecking=no ec2-user@$EC2_IP "cat /opt/pgworld/.env | grep -i port"
    echo ""
    echo "I'll help you fix this!"
elif [[ ! -f /opt/pgworld/pgworld-api ]]; then
    echo "‚ùå API HAS NOT BEEN DEPLOYED"
    echo ""
    echo "Next step:"
    echo "1. Open: C:\\MyFolder\\Mytest\\pgworld-master\\DEPLOY_WITH_PROGRESS.txt"
    echo "2. Copy all contents (Ctrl+A, Ctrl+C)"
    echo "3. Paste into CloudShell (right-click)"
    echo "4. Press Enter and wait ~7 minutes"
else
    echo "‚ùå API is deployed but not running properly"
    echo ""
    echo "Next step: Check the logs to see what went wrong"
    echo ""
    echo "Run this command in CloudShell:"
    echo "ssh -i cloudshell-key.pem ec2-user@$EC2_IP \"sudo journalctl -u pgworld-api -n 50\""
fi

echo ""
echo "=========================================="

