#!/bin/bash
# FAST DEPLOYMENT - Skips slow compilation by building on CloudShell first

echo "=========================================="
echo "🚀 Fast API Deployment (2 minutes)"
echo "=========================================="
echo ""

EC2_IP="34.227.111.143"
SSH_KEY="cloudshell-key.pem"

# Step 1: Build API on CloudShell (faster CPU)
echo "Step 1: Building API on CloudShell (fast)..."
echo "  - Cloning code..."
cd /tmp
rm -rf pgni
git clone -q https://github.com/siddam01/pgni.git 2>&1 | grep -v "Cloning"

cd pgni/pgworld-api-master

echo "  - Installing Go (if needed)..."
if [ ! -f /usr/local/go/bin/go ]; then
    wget -q https://go.dev/dl/go1.21.0.linux-amd64.tar.gz
    sudo tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz
    rm go1.21.0.linux-amd64.tar.gz
fi

export PATH=$PATH:/usr/local/go/bin

echo "  - Compiling API (this is faster on CloudShell)..."
GOOS=linux GOARCH=amd64 go build -o pgworld-api . 2>&1 | tail -1

if [ ! -f pgworld-api ]; then
    echo "❌ Build failed!"
    exit 1
fi

echo "✓ Build complete ($(du -h pgworld-api | cut -f1))"
echo ""

# Step 2: Deploy to EC2 (just copy files)
echo "Step 2: Deploying to EC2 (quick)..."

echo "  - Stopping old service..."
ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP "sudo systemctl stop pgworld-api 2>/dev/null" 2>&1 | grep -v "Pseudo"

echo "  - Creating directories..."
ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP "sudo mkdir -p /opt/pgworld/logs && sudo chown -R ec2-user:ec2-user /opt/pgworld" 2>&1 | grep -v "Pseudo"

echo "  - Copying API binary..."
scp -i ~/$SSH_KEY -o StrictHostKeyChecking=no pgworld-api ec2-user@$EC2_IP:/opt/pgworld/ 2>&1 | grep -v "Pseudo"

echo "  - Setting permissions..."
ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP "chmod +x /opt/pgworld/pgworld-api" 2>&1 | grep -v "Pseudo"

echo "  - Creating config..."
ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP "cat > /opt/pgworld/.env << 'EOF'
DB_HOST=database-pgni.cezawkgguojl.us-east-1.rds.amazonaws.com
DB_PORT=3306
DB_USER=admin
DB_PASSWORD=Omsairamdb951#
DB_NAME=pgworld
AWS_REGION=us-east-1
S3_BUCKET=pgni-preprod-698302425856-uploads
PORT=8080
test=false
EOF
chmod 600 /opt/pgworld/.env" 2>&1 | grep -v "Pseudo"

echo "  - Creating systemd service..."
ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP "sudo tee /etc/systemd/system/pgworld-api.service > /dev/null << 'SVC'
[Unit]
Description=PGNi API Server
After=network.target

[Service]
Type=simple
User=ec2-user
WorkingDirectory=/opt/pgworld
ExecStart=/opt/pgworld/pgworld-api
EnvironmentFile=/opt/pgworld/.env
Restart=always
RestartSec=10
StandardOutput=append:/opt/pgworld/logs/output.log
StandardError=append:/opt/pgworld/logs/error.log

[Install]
WantedBy=multi-user.target
SVC
sudo systemctl daemon-reload
sudo systemctl enable pgworld-api" 2>&1 | grep -v "Pseudo"

echo "  - Starting service..."
ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP "sudo systemctl start pgworld-api" 2>&1 | grep -v "Pseudo"

echo "✓ Deployment complete"
echo ""

# Step 3: Initialize database
echo "Step 3: Initializing database..."
echo "  - Creating database..."
ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP "mysql -h database-pgni.cezawkgguojl.us-east-1.rds.amazonaws.com -P 3306 -u admin -pOmsairamdb951# -e 'CREATE DATABASE IF NOT EXISTS pgworld CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;' 2>&1 | grep -v 'Warning'" 2>&1 | grep -v "Pseudo"

echo "  - Creating tables..."
ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP "mysql -h database-pgni.cezawkgguojl.us-east-1.rds.amazonaws.com -P 3306 -u admin -pOmsairamdb951# pgworld << 'SQL' 2>&1 | grep -v 'Warning'
CREATE TABLE IF NOT EXISTS users (id INT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(100) NOT NULL UNIQUE, email VARCHAR(255) NOT NULL UNIQUE, password_hash VARCHAR(255) NOT NULL, role ENUM('admin', 'pg_owner', 'tenant') NOT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
CREATE TABLE IF NOT EXISTS pg_properties (id INT AUTO_INCREMENT PRIMARY KEY, owner_id INT NOT NULL, name VARCHAR(255) NOT NULL, address TEXT, city VARCHAR(100), total_rooms INT DEFAULT 0, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (owner_id) REFERENCES users(id) ON DELETE CASCADE) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
CREATE TABLE IF NOT EXISTS rooms (id INT AUTO_INCREMENT PRIMARY KEY, property_id INT NOT NULL, room_number VARCHAR(50), rent_amount DECIMAL(10,2), is_occupied BOOLEAN DEFAULT FALSE, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (property_id) REFERENCES pg_properties(id) ON DELETE CASCADE) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
CREATE TABLE IF NOT EXISTS tenants (id INT AUTO_INCREMENT PRIMARY KEY, user_id INT NOT NULL, room_id INT, name VARCHAR(255) NOT NULL, phone VARCHAR(20), move_in_date DATE, is_active BOOLEAN DEFAULT TRUE, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
CREATE TABLE IF NOT EXISTS payments (id INT AUTO_INCREMENT PRIMARY KEY, tenant_id INT NOT NULL, amount DECIMAL(10,2) NOT NULL, payment_date DATE NOT NULL, status ENUM('pending', 'completed', 'failed') DEFAULT 'pending', created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
SQL" 2>&1 | grep -v "Pseudo"

echo "✓ Database ready"
echo ""

# Step 4: Test
echo "Step 4: Testing API..."
sleep 3

INTERNAL=$(ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP "curl -s http://localhost:8080/health" 2>&1 | grep -v "Pseudo")
echo "  - Internal: $INTERNAL"

EXTERNAL=$(curl -s http://$EC2_IP:8080/health)
echo "  - External: $EXTERNAL"

echo ""
echo "=========================================="
echo "✓ DEPLOYMENT COMPLETE!"
echo "=========================================="
echo ""
echo "API URL: http://$EC2_IP:8080"
echo "Health: http://$EC2_IP:8080/health"
echo ""
echo "Test now:"
echo "  curl http://$EC2_IP:8080/health"
echo ""

