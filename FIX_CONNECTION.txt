#!/bin/bash
# Quick fix for connection issues

echo "=========================================="
echo "üîç Diagnosing Connection Issues"
echo "=========================================="
echo ""

# Step 1: Check EC2 status
echo "Step 1: Checking EC2 instance status..."
EC2_STATUS=$(aws ec2 describe-instances \
    --filters "Name=tag:Name,Values=*pgni*" \
    --query 'Reservations[0].Instances[0].[State.Name,PublicIpAddress,InstanceId]' \
    --output text 2>/dev/null)

if [ -z "$EC2_STATUS" ]; then
    echo "‚ùå No EC2 instance found with pgni tag"
    echo ""
    echo "Let me search all instances..."
    aws ec2 describe-instances \
        --query 'Reservations[*].Instances[*].[InstanceId,State.Name,PublicIpAddress,Tags[?Key==`Name`].Value|[0]]' \
        --output table
else
    STATE=$(echo $EC2_STATUS | awk '{print $1}')
    IP=$(echo $EC2_STATUS | awk '{print $2}')
    ID=$(echo $EC2_STATUS | awk '{print $3}')
    
    echo "Instance ID: $ID"
    echo "State: $STATE"
    echo "IP: $IP"
    echo ""
    
    if [ "$STATE" == "stopped" ]; then
        echo "‚ö†Ô∏è EC2 instance is STOPPED!"
        echo ""
        echo "Starting instance..."
        aws ec2 start-instances --instance-ids $ID
        
        echo "Waiting for instance to start (60 seconds)..."
        aws ec2 wait instance-running --instance-ids $ID
        
        # Get new IP
        NEW_IP=$(aws ec2 describe-instances --instance-ids $ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
        
        echo "‚úÖ Instance started!"
        echo "New IP: $NEW_IP"
        echo ""
        echo "Update your deployment script with new IP: $NEW_IP"
        
    elif [ "$STATE" == "running" ]; then
        echo "‚úÖ EC2 instance is running"
        echo ""
        echo "Step 2: Checking security group..."
        
        # Check if SSH port is open
        SG_ID=$(aws ec2 describe-instances --instance-ids $ID \
            --query 'Reservations[0].Instances[0].SecurityGroups[0].GroupId' \
            --output text)
        
        echo "Security Group: $SG_ID"
        
        SSH_RULE=$(aws ec2 describe-security-groups --group-ids $SG_ID \
            --query 'SecurityGroups[0].IpPermissions[?FromPort==`22`]' \
            --output json)
        
        if [ "$SSH_RULE" == "[]" ]; then
            echo "‚ùå SSH port 22 is NOT open!"
            echo ""
            echo "Opening SSH port..."
            aws ec2 authorize-security-group-ingress \
                --group-id $SG_ID \
                --protocol tcp \
                --port 22 \
                --cidr 0.0.0.0/0
            echo "‚úÖ SSH port opened"
        else
            echo "‚úÖ SSH port 22 is open"
        fi
        
        echo ""
        echo "Step 3: Testing connectivity..."
        
        # Test if port is actually reachable
        timeout 5 bash -c "cat < /dev/null > /dev/tcp/$IP/22" 2>/dev/null
        if [ $? -eq 0 ]; then
            echo "‚úÖ Port 22 is reachable"
        else
            echo "‚ùå Port 22 is NOT reachable (may need to wait)"
        fi
        
    fi
fi

echo ""
echo "=========================================="
echo "Step 4: Fixing SSH key..."
echo "=========================================="
echo ""

# Check if SSH key exists and is valid
if [ ! -f ~/cloudshell-key.pem ]; then
    echo "‚ùå SSH key not found at ~/cloudshell-key.pem"
    echo ""
    echo "Getting SSH key from Terraform output..."
    
    # Try to get from SSM
    SSH_KEY=$(aws ssm get-parameter \
        --name "/pgni/preprod/ec2/private_key" \
        --with-decryption \
        --query 'Parameter.Value' \
        --output text 2>/dev/null)
    
    if [ -z "$SSH_KEY" ]; then
        echo "‚ùå SSH key not in SSM Parameter Store"
        echo ""
        echo "Please create the key manually:"
        echo ""
        echo "1. On your Windows PC, run:"
        echo "   cd C:\\MyFolder\\Mytest\\pgworld-master\\terraform"
        echo "   terraform output -raw ssh_private_key > ssh-key.txt"
        echo ""
        echo "2. Open ssh-key.txt and copy the content"
        echo ""
        echo "3. In CloudShell, run:"
        echo "   nano ~/cloudshell-key.pem"
        echo "   (Paste the key content)"
        echo "   (Press Ctrl+X, Y, Enter)"
        echo ""
        echo "4. Set permissions:"
        echo "   chmod 600 ~/cloudshell-key.pem"
        echo ""
    else
        echo "‚úÖ Found SSH key in SSM"
        echo "$SSH_KEY" > ~/cloudshell-key.pem
        chmod 600 ~/cloudshell-key.pem
        echo "‚úÖ SSH key saved and permissions set"
    fi
else
    echo "‚úÖ SSH key file exists"
    
    # Verify key format
    KEY_START=$(head -1 ~/cloudshell-key.pem)
    if [[ $KEY_START == *"BEGIN"*"PRIVATE KEY"* ]]; then
        echo "‚úÖ Key format looks correct"
        
        # Check permissions
        PERMS=$(stat -c %a ~/cloudshell-key.pem 2>/dev/null || stat -f %A ~/cloudshell-key.pem)
        if [ "$PERMS" != "600" ]; then
            echo "‚ö†Ô∏è Fixing permissions..."
            chmod 600 ~/cloudshell-key.pem
            echo "‚úÖ Permissions fixed"
        else
            echo "‚úÖ Permissions are correct (600)"
        fi
    else
        echo "‚ùå Key format incorrect!"
        echo "First line: $KEY_START"
        echo ""
        echo "Please recreate the key - see instructions above"
    fi
fi

echo ""
echo "=========================================="
echo "üìã SUMMARY"
echo "=========================================="
echo ""

# Get current EC2 info
CURRENT_IP=$(aws ec2 describe-instances \
    --filters "Name=tag:Name,Values=*pgni*" "Name=instance-state-name,Values=running" \
    --query 'Reservations[0].Instances[0].PublicIpAddress' \
    --output text 2>/dev/null)

if [ "$CURRENT_IP" != "None" ] && [ ! -z "$CURRENT_IP" ]; then
    echo "‚úÖ EC2 Instance: $CURRENT_IP (running)"
    
    if [ -f ~/cloudshell-key.pem ]; then
        echo "‚úÖ SSH Key: ~/cloudshell-key.pem (ready)"
        
        echo ""
        echo "Testing SSH connection..."
        ssh -i ~/cloudshell-key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=5 \
            ec2-user@$CURRENT_IP "echo 'SSH works!'" 2>&1
        
        if [ $? -eq 0 ]; then
            echo ""
            echo "=========================================="
            echo "‚úÖ ‚úÖ ‚úÖ CONNECTION WORKING! ‚úÖ ‚úÖ ‚úÖ"
            echo "=========================================="
            echo ""
            echo "You can now deploy:"
            echo ""
            echo "curl -O https://raw.githubusercontent.com/siddam01/pgni/main/PRODUCTION_DEPLOY.sh"
            echo "chmod +x PRODUCTION_DEPLOY.sh"
            echo ""
            echo "# Edit the script to use correct IP:"
            echo "sed -i 's/34.227.111.143/$CURRENT_IP/g' PRODUCTION_DEPLOY.sh"
            echo ""
            echo "./PRODUCTION_DEPLOY.sh"
        else
            echo ""
            echo "‚ö†Ô∏è SSH still not working. Possible issues:"
            echo "1. Instance still starting up (wait 2 minutes)"
            echo "2. Wrong SSH key"
            echo "3. Security group not updated yet"
            echo ""
            echo "Wait 2 minutes and run this script again"
        fi
    else
        echo "‚ùå SSH Key: Missing"
        echo ""
        echo "Follow instructions above to create the key"
    fi
else
    echo "‚ùå No running EC2 instance found"
    echo ""
    echo "You may need to deploy infrastructure first:"
    echo "cd terraform && terraform apply"
fi

echo ""
echo "=========================================="

