# Copy this ENTIRE block and paste into CloudShell
# This version shows ALL progress in real-time

ssh -i cloudshell-key.pem -o StrictHostKeyChecking=no ec2-user@34.227.111.143 << 'ENDSSH'
#!/bin/bash
set -e

echo "=========================================="
echo "PGNi API Deployment - Starting"
echo "=========================================="
echo ""

echo "Step 1: Installing prerequisites..."
echo "  - Updating system packages..."
sudo yum update -y 2>&1 | tail -3
echo "  - Installing Git..."
sudo yum install -y git 2>&1 | grep -i "complete\|installed\|nothing" | tail -1
echo "  - Installing wget..."
sudo yum install -y wget 2>&1 | grep -i "complete\|installed\|nothing" | tail -1
echo "  - Installing MySQL client..."
sudo yum install -y mysql 2>&1 | grep -i "complete\|installed\|nothing" | tail -1

if [ ! -f /usr/local/go/bin/go ]; then
  echo "  - Installing Go 1.21.0..."
  cd /tmp
  wget -q https://go.dev/dl/go1.21.0.linux-amd64.tar.gz
  sudo tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz
  rm -f go1.21.0.linux-amd64.tar.gz
  echo "  ✓ Go installed"
else
  echo "  ✓ Go already installed"
fi

export PATH=$PATH:/usr/local/go/bin
echo "✓ Prerequisites complete"
echo ""

echo "Step 2: Building API..."
echo "  - Cleaning old builds..."
rm -rf /tmp/pgni
cd /tmp

echo "  - Cloning repository from GitHub..."
git clone https://github.com/siddam01/pgni.git 2>&1 | grep -i "cloning\|done"

cd pgni/pgworld-api-master

echo "  - Downloading Go dependencies..."
go mod download 2>&1 | tail -3

echo "  - Compiling API..."
go build -v -o pgworld-api . 2>&1 | grep -v "^#" | tail -5

if [ ! -f pgworld-api ]; then
    echo "✗ Build failed!"
    exit 1
fi

echo "✓ Build successful"
echo ""

echo "Step 3: Deploying to /opt/pgworld..."
echo "  - Stopping existing service..."
sudo systemctl stop pgworld-api 2>/dev/null && echo "  ✓ Service stopped" || echo "  ✓ No existing service"

echo "  - Creating directories..."
sudo mkdir -p /opt/pgworld/logs
sudo chown -R ec2-user:ec2-user /opt/pgworld

echo "  - Copying API binary..."
cp pgworld-api /opt/pgworld/
chmod +x /opt/pgworld/pgworld-api

echo "  - Creating configuration..."
cat > /opt/pgworld/.env << 'EOF'
DB_HOST=database-pgni.cezawkgguojl.us-east-1.rds.amazonaws.com
DB_PORT=3306
DB_USER=admin
DB_PASSWORD=Omsairamdb951#
DB_NAME=pgworld
AWS_REGION=us-east-1
S3_BUCKET=pgni-preprod-698302425856-uploads
PORT=8080
test=false
EOF
chmod 600 /opt/pgworld/.env

echo "  - Creating systemd service..."
sudo tee /etc/systemd/system/pgworld-api.service > /dev/null << 'SVC'
[Unit]
Description=PGNi API Server
After=network.target

[Service]
Type=simple
User=ec2-user
WorkingDirectory=/opt/pgworld
ExecStart=/opt/pgworld/pgworld-api
EnvironmentFile=/opt/pgworld/.env
Restart=always
RestartSec=10
StandardOutput=append:/opt/pgworld/logs/output.log
StandardError=append:/opt/pgworld/logs/error.log

[Install]
WantedBy=multi-user.target
SVC

echo "  - Reloading systemd..."
sudo systemctl daemon-reload

echo "  - Enabling service..."
sudo systemctl enable pgworld-api

echo "  - Starting service..."
sudo systemctl start pgworld-api

echo "✓ Deployment complete"
echo ""

echo "Step 4: Waiting for service to start..."
sleep 5
echo "✓ Service should be running"
echo ""

echo "Step 5: Initializing database..."
echo "  - Creating database..."
mysql -h database-pgni.cezawkgguojl.us-east-1.rds.amazonaws.com -P 3306 -u admin -pOmsairamdb951# \
  -e "CREATE DATABASE IF NOT EXISTS pgworld CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;" 2>&1 | grep -v "mysql: \[Warning\]" || echo "  ✓ Database exists"

echo "  - Creating tables..."
mysql -h database-pgni.cezawkgguojl.us-east-1.rds.amazonaws.com -P 3306 -u admin -pOmsairamdb951# pgworld << 'SQL' 2>&1 | grep -v "mysql: \[Warning\]"
CREATE TABLE IF NOT EXISTS users (id INT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(100) NOT NULL UNIQUE, email VARCHAR(255) NOT NULL UNIQUE, password_hash VARCHAR(255) NOT NULL, role ENUM('admin', 'pg_owner', 'tenant') NOT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
CREATE TABLE IF NOT EXISTS pg_properties (id INT AUTO_INCREMENT PRIMARY KEY, owner_id INT NOT NULL, name VARCHAR(255) NOT NULL, address TEXT, city VARCHAR(100), total_rooms INT DEFAULT 0, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (owner_id) REFERENCES users(id) ON DELETE CASCADE) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
CREATE TABLE IF NOT EXISTS rooms (id INT AUTO_INCREMENT PRIMARY KEY, property_id INT NOT NULL, room_number VARCHAR(50), rent_amount DECIMAL(10,2), is_occupied BOOLEAN DEFAULT FALSE, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (property_id) REFERENCES pg_properties(id) ON DELETE CASCADE) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
CREATE TABLE IF NOT EXISTS tenants (id INT AUTO_INCREMENT PRIMARY KEY, user_id INT NOT NULL, room_id INT, name VARCHAR(255) NOT NULL, phone VARCHAR(20), move_in_date DATE, is_active BOOLEAN DEFAULT TRUE, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
CREATE TABLE IF NOT EXISTS payments (id INT AUTO_INCREMENT PRIMARY KEY, tenant_id INT NOT NULL, amount DECIMAL(10,2) NOT NULL, payment_date DATE NOT NULL, status ENUM('pending', 'completed', 'failed') DEFAULT 'pending', created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
SQL

echo "✓ Database initialized"
echo ""

echo "Step 6: Testing API..."
echo "  - Internal test (localhost):"
INTERNAL=$(curl -s http://localhost:8080/health)
echo "    Response: $INTERNAL"

echo "  - External test (public IP):"
EXTERNAL=$(curl -s http://34.227.111.143:8080/health)
echo "    Response: $EXTERNAL"

echo ""
echo "Step 7: Service Status"
sudo systemctl status pgworld-api --no-pager | head -15

echo ""
echo "Step 8: Recent Logs"
sudo journalctl -u pgworld-api -n 20 --no-pager

echo ""
echo "=========================================="
echo "✓ DEPLOYMENT COMPLETE!"
echo "=========================================="
echo ""
echo "API is running at:"
echo "  http://34.227.111.143:8080"
echo ""
echo "Health check:"
echo "  http://34.227.111.143:8080/health"
echo ""
echo "To view logs:"
echo "  sudo journalctl -u pgworld-api -f"
echo ""

ENDSSH

echo ""
echo "=========================================="
echo "Testing from CloudShell..."
echo "=========================================="
sleep 3

curl http://34.227.111.143:8080/health

echo ""
echo ""
echo "=========================================="
echo "✓ DEPLOYMENT FINISHED!"
echo "=========================================="
echo ""
echo "Test in your browser:"
echo "  http://34.227.111.143:8080/health"
echo ""

