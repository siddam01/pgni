================================================================================
  VALIDATED DEPLOYMENT - COPY & PASTE INTO AWS CLOUDSHELL
================================================================================

üéØ NEW: Auto-detects your EC2 instance by IP address!
üéØ NEW: Pre-deployment validation included!

================================================================================
  STEP 1: Download everything needed
================================================================================

cd ~ && \
curl -O https://raw.githubusercontent.com/siddam01/pgni/main/COMPLETE_ENTERPRISE_DEPLOYMENT.sh && \
curl -O https://raw.githubusercontent.com/siddam01/pgni/main/PRE_DEPLOYMENT_CHECK.sh && \
curl -O https://raw.githubusercontent.com/siddam01/pgni/main/terraform/ssh-key.txt && \
mv ssh-key.txt cloudshell-key.pem && \
chmod 600 cloudshell-key.pem && \
chmod +x COMPLETE_ENTERPRISE_DEPLOYMENT.sh && \
chmod +x PRE_DEPLOYMENT_CHECK.sh

================================================================================
  STEP 2: Run validation (checks everything first)
================================================================================

./PRE_DEPLOYMENT_CHECK.sh

This will check:
‚úÖ AWS CLI and credentials
‚úÖ EC2 instance (auto-finds by IP: 34.227.111.143)
‚úÖ EC2 connectivity (ports 22, 80, 8080)
‚úÖ SSH key file
‚úÖ RDS database
‚úÖ S3 bucket
‚úÖ GitHub repository
‚úÖ Deployment script

================================================================================
  STEP 3: If validation passes, deploy!
================================================================================

./COMPLETE_ENTERPRISE_DEPLOYMENT.sh

This will:
‚úÖ Auto-detect your EC2 instance (no hardcoded IDs!)
‚úÖ Expand disk to 100GB if needed
‚úÖ Install Flutter SDK and all dependencies
‚úÖ Build Admin & Tenant Flutter apps
‚úÖ Deploy to Nginx
‚úÖ Configure routing and CORS
‚úÖ Validate everything works

Duration: ~15-20 minutes (fully automated)

================================================================================
  WHAT'S FIXED:
================================================================================

‚ùå OLD: Hardcoded instance ID (caused "instance not running" error)
‚úÖ NEW: Auto-detects instance by IP address (34.227.111.143)

‚ùå OLD: No validation before deployment
‚úÖ NEW: Pre-deployment check validates everything first

‚ùå OLD: Silent failures
‚úÖ NEW: Clear error messages and suggestions

================================================================================
  AFTER DEPLOYMENT:
================================================================================

üåê Access URLs:
   Admin Portal:  http://34.227.111.143/admin/
   Tenant Portal: http://34.227.111.143/tenant/
   Backend API:   http://34.227.111.143:8080/health

üîê Test Accounts:
   Super Admin:   admin@pgworld.com / Admin@123
   PG Owner:      owner@pg.com / Owner@123
   Tenant:        tenant@pg.com / Tenant@123

================================================================================
  TROUBLESHOOTING:
================================================================================

If PRE_DEPLOYMENT_CHECK.sh finds issues:

1. EC2 instance not found:
   - Check AWS Console that instance is running
   - Verify IP is 34.227.111.143
   - Check you're in the correct AWS region (us-east-1)

2. SSH key issues:
   - Script will auto-download the key
   - Make sure chmod 600 cloudshell-key.pem

3. Port connectivity issues:
   - Check Security Groups in AWS Console
   - Ensure ports 22, 80, 8080 are open
   - May need to add your IP to security group

4. AWS credentials:
   - CloudShell has automatic credentials
   - If not in CloudShell, run: aws configure

================================================================================
  VALIDATION COMMANDS (after deployment):
================================================================================

# Quick health check
curl http://34.227.111.143:8080/health
curl -I http://34.227.111.143/admin/
curl -I http://34.227.111.143/tenant/

# SSH to EC2 and check services
ssh -i cloudshell-key.pem ec2-user@34.227.111.143
sudo systemctl status pgworld-api
sudo systemctl status nginx
df -h
exit

================================================================================
  READY? COPY STEPS 1-3 ABOVE INTO CLOUDSHELL!
================================================================================

