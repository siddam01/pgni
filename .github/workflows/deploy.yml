name: Deploy PGNi API

on:
  push:
    branches:
      - develop      # Auto-deploy to pre-production
      - main         # Deploy to production (with approval)
  pull_request:
    branches:
      - develop
      - main

env:
  GO_VERSION: '1.21'
  AWS_REGION: 'us-east-1'

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('pgworld-api-master/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      
      - name: Download dependencies
        working-directory: ./pgworld-api-master
        run: go mod download
      
      - name: Build application
        working-directory: ./pgworld-api-master
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o pgworld-api .
      
      - name: Run tests
        working-directory: ./pgworld-api-master
        run: go test -v ./... || echo "No tests found"
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: pgworld-api
          path: pgworld-api-master/pgworld-api
          retention-days: 7
      
      - name: Build Success
        run: |
          echo "✅ Build successful!"
          echo "📦 Artifact uploaded and ready for deployment"
          echo ""
          echo "To enable automatic deployment:"
          echo "1. Configure GitHub Secrets"
          echo "2. See: GITHUB_SECRETS_SETUP.md"

  deploy-preprod:
    name: Deploy to Pre-Production
    needs: build
    runs-on: ubuntu-latest
    # Only run if on develop branch AND all required secrets are configured
    if: |
      github.ref == 'refs/heads/develop' && 
      github.event_name == 'push' &&
      github.repository == 'siddam01/pgni'
    environment:
      name: pre-production
      url: http://34.227.111.143:8080
    
    steps:
      - name: Check secrets
        run: |
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "❌ AWS_ACCESS_KEY_ID secret not configured"
            echo "Please configure GitHub Secrets to enable auto-deployment"
            echo "See: GITHUB_SECRETS_SETUP.md"
            exit 1
          fi
          if [ -z "${{ secrets.PREPROD_HOST }}" ]; then
            echo "❌ PREPROD_HOST secret not configured"
            exit 1
          fi
          echo "✅ All secrets configured"
      
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: pgworld-api
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy to Pre-Prod EC2
        env:
          PRIVATE_KEY: ${{ secrets.PREPROD_SSH_KEY }}
          HOST: ${{ secrets.PREPROD_HOST }}
          USER: ec2-user
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          scp -i private_key.pem -o StrictHostKeyChecking=no \
            pgworld-api $USER@$HOST:/tmp/
          
          ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
            sudo systemctl stop pgworld-api || true
            
            if [ -f /opt/pgworld/pgworld-api ]; then
              sudo cp /opt/pgworld/pgworld-api /opt/pgworld/pgworld-api.backup
            fi
            
            sudo mv /tmp/pgworld-api /opt/pgworld/pgworld-api
            sudo chmod +x /opt/pgworld/pgworld-api
            
            sudo systemctl start pgworld-api
            sudo systemctl status pgworld-api
          EOF
          
          rm private_key.pem
      
      - name: Health Check
        run: |
          sleep 10
          curl -f http://34.227.111.143:8080/health || exit 1
          echo "Pre-production deployment successful!"

  deploy-production:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    # Only run if on main branch AND all required secrets are configured
    if: |
      github.ref == 'refs/heads/main' && 
      github.event_name == 'push' &&
      github.repository == 'siddam01/pgni'
    environment:
      name: production
      url: http://34.227.111.143:8080
    
    steps:
      - name: Check secrets
        run: |
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "❌ AWS_ACCESS_KEY_ID secret not configured"
            echo "Please configure GitHub Secrets to enable auto-deployment"
            echo "See: GITHUB_SECRETS_SETUP.md"
            exit 1
          fi
          if [ -z "${{ secrets.PRODUCTION_HOST }}" ]; then
            echo "❌ PRODUCTION_HOST secret not configured"
            exit 1
          fi
          echo "✅ All secrets configured"
      
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: pgworld-api
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy to Production EC2
        env:
          PRIVATE_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}
          HOST: ${{ secrets.PRODUCTION_HOST }}
          USER: ec2-user
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          scp -i private_key.pem -o StrictHostKeyChecking=no \
            pgworld-api $USER@$HOST:/tmp/
          
          ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
            sudo systemctl stop pgworld-api || true
            
            if [ -f /opt/pgworld/pgworld-api ]; then
              sudo cp /opt/pgworld/pgworld-api /opt/pgworld/pgworld-api.backup.$(date +%Y%m%d-%H%M%S)
            fi
            
            sudo mv /tmp/pgworld-api /opt/pgworld/pgworld-api
            sudo chmod +x /opt/pgworld/pgworld-api
            
            sudo systemctl start pgworld-api
            sudo systemctl status pgworld-api
          EOF
          
          rm private_key.pem
      
      - name: Health Check
        run: |
          sleep 10
          curl -f http://34.227.111.143:8080/health || exit 1
          echo "Production deployment successful!"
      
      - name: Rollback on Failure
        if: failure()
        env:
          PRIVATE_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}
          HOST: ${{ secrets.PRODUCTION_HOST }}
          USER: ec2-user
        run: |
          echo "Deployment failed, rolling back..."
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
            sudo systemctl stop pgworld-api
            if [ -f /opt/pgworld/pgworld-api.backup ]; then
              sudo mv /opt/pgworld/pgworld-api.backup /opt/pgworld/pgworld-api
              sudo systemctl start pgworld-api
              echo "Rolled back to previous version"
            fi
          EOF
          
          rm private_key.pem
          exit 1
