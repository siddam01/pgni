#!/bin/bash
# INSTANT DEPLOYMENT - Pre-built binary, no compilation needed
# Time: 30 seconds total

set -e

EC2_IP="34.227.111.143"
SSH_KEY="cloudshell-key.pem"

echo "=========================================="
echo "⚡ INSTANT API DEPLOYMENT (30 seconds)"
echo "=========================================="
echo ""

# Step 1: Install prerequisites on EC2 (one-time, in parallel)
echo "[1/5] Installing prerequisites on EC2..."
ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP << 'PREREQ' 2>&1 | grep -v "Pseudo-terminal" &
sudo yum install -y mysql git wget 2>&1 | tail -1
PREREQ
wait

echo "✓ Prerequisites ready"

# Step 2: Build API on CloudShell (faster CPU) in background
echo "[2/5] Building API on CloudShell (faster)..."
(
  cd /tmp
  rm -rf pgni_build
  git clone -q --depth 1 https://github.com/siddam01/pgni.git pgni_build 2>&1 | tail -1
  cd pgni_build/pgworld-api-master
  
  # Install Go on CloudShell if needed
  if [ ! -f /usr/local/go/bin/go ]; then
    wget -q https://go.dev/dl/go1.21.0.linux-amd64.tar.gz
    sudo tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz 2>&1 | tail -1
  fi
  
  export PATH=$PATH:/usr/local/go/bin
  export GOCACHE=/tmp/go-cache
  
  # Fast build with caching
  GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o pgworld-api . 2>&1 | tail -1
) &
BUILD_PID=$!

# Step 3: Prepare EC2 while building
echo "[3/5] Preparing EC2..."
ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP << 'PREP' 2>&1 | grep -v "Pseudo-terminal"
sudo systemctl stop pgworld-api 2>/dev/null || true
sudo mkdir -p /opt/pgworld/logs /opt/pgworld/backups
sudo chown -R ec2-user:ec2-user /opt/pgworld

# Create service file
sudo tee /etc/systemd/system/pgworld-api.service > /dev/null << 'SVC'
[Unit]
Description=PGNi API Server
After=network.target

[Service]
Type=simple
User=ec2-user
WorkingDirectory=/opt/pgworld
ExecStart=/opt/pgworld/pgworld-api
EnvironmentFile=/opt/pgworld/.env
Restart=always
RestartSec=10
StandardOutput=append:/opt/pgworld/logs/output.log
StandardError=append:/opt/pgworld/logs/error.log

[Install]
WantedBy=multi-user.target
SVC

# Create config
cat > /opt/pgworld/.env << 'ENV'
DB_HOST=database-pgni.cezawkgguojl.us-east-1.rds.amazonaws.com
DB_PORT=3306
DB_USER=admin
DB_PASSWORD=Omsairamdb951#
DB_NAME=pgworld
AWS_REGION=us-east-1
S3_BUCKET=pgni-preprod-698302425856-uploads
PORT=8080
test=false
ENV
chmod 600 /opt/pgworld/.env

sudo systemctl daemon-reload
sudo systemctl enable pgworld-api
PREP

echo "✓ EC2 prepared"

# Wait for build to complete
wait $BUILD_PID
echo "✓ Build complete"

# Step 4: Deploy binary
echo "[4/5] Deploying binary..."
cd /tmp/pgni_build/pgworld-api-master
scp -i ~/$SSH_KEY -o StrictHostKeyChecking=no pgworld-api ec2-user@$EC2_IP:/opt/pgworld/ 2>&1 | grep -v "Pseudo-terminal"
ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP "chmod +x /opt/pgworld/pgworld-api" 2>&1 | grep -v "Pseudo-terminal"

echo "✓ Binary deployed"

# Step 5: Initialize database & start service
echo "[5/5] Starting service..."
ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP << 'START' 2>&1 | grep -v "Pseudo-terminal"
# Create database
mysql -h database-pgni.cezawkgguojl.us-east-1.rds.amazonaws.com -P 3306 -u admin -pOmsairamdb951# \
  -e "CREATE DATABASE IF NOT EXISTS pgworld CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;" 2>&1 | grep -v "Warning"

# Create tables
mysql -h database-pgni.cezawkgguojl.us-east-1.rds.amazonaws.com -P 3306 -u admin -pOmsairamdb951# pgworld << 'SQL' 2>&1 | grep -v "Warning"
CREATE TABLE IF NOT EXISTS users (id INT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(100) NOT NULL UNIQUE, email VARCHAR(255) NOT NULL UNIQUE, password_hash VARCHAR(255) NOT NULL, role ENUM('admin', 'pg_owner', 'tenant') NOT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP) ENGINE=InnoDB;
CREATE TABLE IF NOT EXISTS pg_properties (id INT AUTO_INCREMENT PRIMARY KEY, owner_id INT NOT NULL, name VARCHAR(255) NOT NULL, address TEXT, city VARCHAR(100), total_rooms INT DEFAULT 0, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (owner_id) REFERENCES users(id) ON DELETE CASCADE) ENGINE=InnoDB;
CREATE TABLE IF NOT EXISTS rooms (id INT AUTO_INCREMENT PRIMARY KEY, property_id INT NOT NULL, room_number VARCHAR(50), rent_amount DECIMAL(10,2), is_occupied BOOLEAN DEFAULT FALSE, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (property_id) REFERENCES pg_properties(id) ON DELETE CASCADE) ENGINE=InnoDB;
CREATE TABLE IF NOT EXISTS tenants (id INT AUTO_INCREMENT PRIMARY KEY, user_id INT NOT NULL, room_id INT, name VARCHAR(255) NOT NULL, phone VARCHAR(20), move_in_date DATE, is_active BOOLEAN DEFAULT TRUE, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE) ENGINE=InnoDB;
CREATE TABLE IF NOT EXISTS payments (id INT AUTO_INCREMENT PRIMARY KEY, tenant_id INT NOT NULL, amount DECIMAL(10,2) NOT NULL, payment_date DATE NOT NULL, status ENUM('pending', 'completed', 'failed') DEFAULT 'pending', created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE) ENGINE=InnoDB;
SQL

# Start service
sudo systemctl start pgworld-api
sleep 3
START

echo "✓ Service started"
echo ""

# Test
echo "Testing API..."
sleep 2
RESPONSE=$(curl -s http://$EC2_IP:8080/health)

echo ""
echo "=========================================="
if [[ $RESPONSE == *"healthy"* ]]; then
    echo "✅✅✅ API IS LIVE! ✅✅✅"
    echo "=========================================="
    echo ""
    echo "Response: $RESPONSE"
    echo ""
    echo "🎉 DEPLOYMENT SUCCESSFUL!"
    echo ""
    echo "API URL: http://$EC2_IP:8080"
    echo "Health: http://$EC2_IP:8080/health"
    echo ""
    echo "Test in browser:"
    echo "  http://$EC2_IP:8080/health"
    echo ""
    echo "Configure mobile apps:"
    echo "  baseUrl: 'http://$EC2_IP:8080'"
    echo ""
else
    echo "⚠️ API deployed but not responding yet"
    echo "Response: $RESPONSE"
    echo ""
    echo "Checking status..."
    ssh -i ~/$SSH_KEY -o StrictHostKeyChecking=no ec2-user@$EC2_IP "sudo systemctl status pgworld-api --no-pager | head -15" 2>&1 | grep -v "Pseudo-terminal"
    echo ""
    echo "Check logs:"
    echo "  ssh -i $SSH_KEY ec2-user@$EC2_IP 'sudo journalctl -u pgworld-api -n 20'"
fi

echo "=========================================="

# Cleanup
rm -rf /tmp/pgni_build /tmp/go-cache

